if you want to create a route in Express

yes first of all you are going to be referencing the instance and inside this instance we have a lot of methods which

we are going to be using throughout this course so in this case we are just interested in this HTTP method which

will be get and then here we have to specify the path which we want to head or or user will head and then here it

will take a callback function and later I'm going to show you a lot of ways to provide a callback function and a lot of

ways to provide a path but in this case you just have to understand like it will take a path then it will take a callback

function right here and and this callback function will take a request and it will also take something called

response so the user will provide a request and we have to provide the response.

///////////////////////////////////////////////////////////////////////////////////
app.param::
app.param is a middleware function in Express.js, a popular web framework for Node.js. It is used to define middleware that gets executed whenever a specific route parameter is matched in a URL.

This is particularly useful when you need to handle logic related to specific route parameters, such as validating, sanitizing, or fetching data associated with that parameter from a database.

app.param(name, callback)
name: The name of the route parameter (string).
callback: A middleware function that is executed when the route parameter is matched.

How It Works:
When a route with the specified parameter (:paramName) is matched, the app.param middleware gets executed before the route handler.
The middleware provides access to:
The request object (req).
The response object (res).
The next function (next) to pass control to the next middleware or route handler.
The value of the parameter and the parameter's name.

Example Use Case
Fetching User Data Based on a User ID
const express = require('express');
const app = express();

// Dummy database
const users = {
  1: { id: 1, name: 'John Doe' },
  2: { id: 2, name: 'Jane Smith' },
};

// Define app.param for 'userId'
app.param('userId', (req, res, next, userId) => {
  const user = users[userId];
  if (user) {
    req.user = user; // Attach user to the request object
    next(); // Pass control to the next middleware
  } else {
    res.status(404).send('User not found'); // Handle invalid userId
  }
});

// Route using the 'userId' parameter
app.get('/users/:userId', (req, res) => {
  res.send(`User Info: ${JSON.stringify(req.user)}`);
});

// Start the server
app.listen(3000, () => console.log('Server running on http://localhost:3000'));

Explanation
Middleware Setup with app.param:
Whenever a route with :userId is matched, the app.param middleware is triggered.
It checks if the userId exists in the database (users object) and attaches the user data to the req object.

Route Handling:
The GET /users/:userId route handler uses the data set by app.param.

Output:
Visiting /users/1:
Response: User Info: {"id":1,"name":"John Doe"}
Visiting /users/99:
Response: 404 User not found

Advantages of app.param
Code Reusability: Centralizes logic for handling route parameters.
Readability: Keeps route handlers clean by offloading parameter-specific logic.
Efficiency: Executes once for a parameter, even if multiple routes match the parameter.


**********Controllers*********
What Are Controllers?
A controller in Express.js is simply a JavaScript module (or file) that contains functions to handle specific requests for routes. Each function corresponds to a specific route and its HTTP method.

How Controllers Work
Request Handling:

A controller function processes incoming HTTP requests (e.g., GET, POST, PUT, DELETE).
It interacts with models, databases, or services to fetch or modify data.
It sends a response back to the client.
Separation of Concerns:

Routes define the endpoints (e.g., /users).
Controllers contain the logic for what happens when those endpoints are accessed.
Setting Up Controllers
Hereâ€™s how to create and use controllers in Express.js:

Step 1: Create a Controller
Save your business logic in a separate file.
javascript:::
// controllers/userController.js

// Get all users
exports.getAllUsers = (req, res) => {
  res.send("Here are all the users");
};

// Get a specific user by ID
exports.getUserById = (req, res) => {
  const userId = req.params.id;
  res.send(`Details of user with ID: ${userId}`);
};

// Create a new user
exports.createUser = (req, res) => {
  const { name, email } = req.body;
  res.send(`User ${name} with email ${email} has been created`);
};


Step 2: Define Routes
Use the controller functions in your routes.
javascript::::::::::
// routes/userRoutes.js

const express = require("express");
const router = express.Router();
const userController = require("../controllers/userController");

// Define routes and map them to controller functions
router.get("/", userController.getAllUsers);
router.get("/:id", userController.getUserById);
router.post("/", userController.createUser);

module.exports = router;


Step 3: Use the Routes in the Main App
Link your route files in your main application file.

javascript:::::::::
// app.js or server.js

const express = require("express");
const app = express();
const userRoutes = require("./routes/userRoutes");

// Middleware for parsing JSON
app.use(express.json());

// Use the user routes
app.use("/users", userRoutes);

const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});

//Middle wares////
as the name suggests that it will be a some sort of a JavaScript function which
we are going to be passing at the middle of the request and the response so we would have some sort of a JavaScript
function which we are going to be passing at the middle of the request and the response cycle 

app.use:::::::::::::

install body parser for getting requests from body